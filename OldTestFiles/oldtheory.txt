I'm not using this anymore but I worked hard on it and don't want to lose it






Since all logarithms can be defined using base transformations, from
an arbitrary base, we only need to define a single logarithmic function, from
which any other logarithmic function could be generated.
We will define the natural logarithm, since it's the most useful.

First, we will attempt to define a vector E which is isomorphic to the scalar
e in this system.
define exp(V) as the sum from k = 0 to infinity of V^k / k!:
exp(V) = I + V + V^2/2! + V^3/3! + ...
E = exp(I) =  I * Σ(1/k)! from k = 0 to infinity
however, Σ(1/k)! from k = 0 to infinity is the definition of the scalar e.
Therefore, in our system, E = e * I
This is exactly what you would expect - as usual, our scalar mapping is
simply a complex number with 0 imaginary part.



We will now explore in depth what it means to raise a vector to the power of another vector
(or a complex number to the power of another complex number)

We will be trying to come up with a conceptual and mathematical model that defines the following:
W ^ Z = K
Where W, Z, and K are vectors (or complex numbers)

We will use the definition of a logarithm to get there.

Strap in, this one's a doozy!!  This is the entire purpose of this exercise and it is
freakin' complicated.  If anyone does end up reading this, I hope it helps you conceptualize
what it even means to raise a vector to the power of another vector.

I've tried to use uppercase letters to indicate Vectors and Vector Operands
and lowercase letters to indicate scalars and scalar operands.  I may have not done
this perfectly.

What is a logarithm?  It's a function such that
logb(b^x) = x

For a complex number raised to an integer power, this means that
logw(W ^ n) = n

For example:
If  W = (1, 3i) and n = 2,  W ^ n = (-8, 8i)
Since Logw(W ^ n) = n, we know that logw(-8, 8i) = 2

let W = (wx + wyi)
let Z = (zx + zyi)
let W^Z = K
What is K?

LogW(W^Z) = Z                                      <<definition of a logarithm
LogW(W^Z) = logW(K)                                <<W ^ Z = K
LogW(K) = Z                                        <<simple substitution
LogW(K) = LogE(K) / LogE(W)                        <<change of base rule: logb(x) = logd(x)/logd(b)
LogW(K) = LN(K) / LN(W)                            <<Instead of base W, we now use base E
LogW(K) * LN(W) = LN(K)                            <<multiplication by LN(W)
LN(K) = LogW(K) * LN(W)                            <<rearranging
K = E^[LogW(K)*LN(W)]                              <<raise both sides to an exponent
K = E ^ [Z    *LN(W)]                              <<substitution
W^Z = E^[Z*LN(W)]                                  <<substitution
-----------------------------------------------------------------------------------
W' = LN(W)                                         <<defining a new term W'
E^(W') = W                                         <<E^LN(X)= X
Suppose W = (I*Rw)*E^(I'*θw)                       <<good guess from the guys who know the answer
-----------------------------------------------------------------------------------
Then W' = LN[(I*Rw)*E^(I'*θw)]                     <<substitution
W' = LN(I*Rw) + LN(E^(I'*θw))                      <<Ln(A*B) = Ln(A)+Ln(B)
W' = LN(I*Rw) + I'*iθw				               <<Ln(E^(x)) = I*x
W = E^(W')					                       <<copied from above
W = E^[LN(I*Rw) + I'*θw]                           <<substituting W'
W = [E^LN(I*Rw)]*[E^(I'*θw)]                       <<X^(A*B) = (X^A)^B
W = (I*Rw)*E^(I'*θw)				               <<E^LN(X) = X
W^Z = [(I*Rw)*E^(I'*θw)]^Z                         <<Exponentiating the above line by the vector Z
W^Z = E^[Z*LN(W)]                                  <<copied from the line before we defined W'
W^Z = E^[Z]*E^[LN(W)]                              <<X^(A+B) = (X^A)*(X^B)
W^Z = E^[Z]*W                                      <<E^LN(W) = W
^^need to look more closely at this.  Seems wrong.

W^Z = E^[Z]*(I*Rw)*E^(I'*θw )                      <<W = (I*Rw)*E^(I*iθw)
W^Z = (I*Rw)*E^[Z]*E^(I'*θ w)                      <<rearranging
W^Z = (I*Rw)*E^(Z + I'*θw )                        <<(X^A)*(X^B) = X^(A+B)
W^Z = K

K = (I*Rw)*E^(Z + I'*iθw)
We've now redefined exponentiation in terms of an exponential function.

If we can define our exponential function, we can have a well-defined system of exponentiation.

Once again, we would like to have a system such that
|W ^ Z| = |W| ^ |Z|
We will allow this to be a definition and see if we can calculate a value for the angular change of this
system.

From an intuitive perspective, what does the below function tell us?
K = (I*Rw)*E^(Z + I'*iθw)

Let's look only at the magnitude.  I will revert to a more familiar scalar notation.
let's use the form Rk = |K|
then, if we define Q = Z + (I' * iθw), we have a nice scalar equivalency:
Rk=Rw*(Re)^(Rq)

Here, Q = (Zx, Zy + θw)
Rq = (Zx^2 + (Zy + θw)^2)^.5

Since we know W and Z, this is well-defined:
Rk = Rw * Re ^ Rq

Further, the exponentiation is "recursively" defined in terms of the exponentiation of the natural logarithm:
W^X = Rw * E ^ Q





.

Conceptually, vector multiplication is simply scalar multiplication of the
magnitude combined with scalar addition of the angle.  Therefore, we can
exponentiate the magnitude using normal methods.
For fractional powers divisible by 2, we will allow the angle to be rotated
by pi radians / 180 degrees.
This is conceptually similar
to the idea that (n^2)^.5 = +/- n
For the angle, we should consider what happens when we take the square root
of a squared vector, and the third root of a cubed vector, etc., and see if
we can extrapolate from there.

For a vector V1 squared, the angle of the resulting vector V2 will be
θ2 = θ1 * 2 (multiplication is just addition to the nth power)
Therefore, when taking the square root of a vector V1, the angle
of the resulting vector V2 will be
θ2 = θ1 / 2
For a vector V1 cubed the angle of the resulting vector V2 will be
θ2 = θ1 * 3
Therefore, when taking the cubic root of a vector V1, the angle
of the resulting vector V2 will be
θ2 = θ1 / 3
We can extrapolate to say that for a vector V1 raised to a real
power r, the angle of the resulting vector V2 will be
θ2 = θ1 * r

Therefore, we can say that vector exponentiation follows the following
rules:
If |n| > 1 or 1/n is not divisible by 2:
V^n = |V|^n < θ*n
If 0 < |n| < 1 and (1/n) is divisible by 2:
V^n = |V|^n < θ*n or |V|^n < θ*n + pi
This can awkwardly but more correctly be written:
V^2 = |V|^n < θ*n - pi/2 +/- pi/2

Given that the multiplication of vectors in this manner is isomorphic
to multiplication of imaginary numbers, we can use the same formula
to calculate the exponentiation of imaginary numbers.

What about raising a vector to the power of a vector?

Intuitively, the magnitude of one would be raised to the magnitude of the other.

That is because the magnitude of a vector is an unbounded real number.

However, the angle is a real number bounded between 0 and 2pi (6.28).  We would like
the output of our angle exponentiation to be an unbounded number which we will
then convert back to an angle between 0 and 2pi.  We can possibly do this
by considering the angle as an exponentiation of some base angle, but we'll
want to see how that works for the magnitude and see if we can find a good
parallel.

What if we consider our individual magnitudes as exponents from a common base e?
M1 = e^X1
M2 = e^X2
X1 = ln(M1)
X2 = ln(M2)
Then, M1 ^ M2 = (e ^ X1) ^ (e ^ X2)

However, we can also calculate this in a simpler fashion, without calculating
X1 and X2:
logM1(M1 ^ M2) = M2
logB(x) = logD(x) / logD(B)
ln(M1 ^ M2) = logM1(M1 ^ M2) / ln(M1)
e^(ln(M1 ^ M2)) = e^(logM1(M1 ^ M2) / ln(M1))
M1 ^ M2 = e^(logM1(M1 ^ M2) / ln(M1)
M1 ^ M2 = e^(M2 / ln(M1))

What about the angle?

Let's assume that an angle of 0 corresponds to a "magnitude" of 1 - this means
that the angle should not shift at all.
Let's assume that an angle of 2 * pi corresponds to a "magnitude" of infinity -
this means that the angle will shift as much as it possibly can.
We need a mapping that takes the numbers 0 -> 2 * pi and translates them to
1 -> infinity.
Investigating several options, the simplest is below:
θ'=1-1/ln(θ/2pi)
Now that we have a mapping from 1 -> infinity, we can do exponentiation:
θ'result = θ'1 ^ θ'2
Finally, we will map backwards from θ' to θ - we will need to map
the numbers 1->infinity back to 0->2*pi:
θ'=1-1/ln(θ/2pi)
ln(θ/2pi)(θ'-1)=-1
ln(θ/2pi) = -1/(θ'-1)
θ/2pi = e^(-1/(θ'-1))
θ=2pi*e^(-1/(θ'-1))


##            magSquaredAddition =  self.x ** 2 + self.y ** 2 + other.x ** 2 + other.y **2 + \
##                2 * self.x * other.x + 2 * self.y * other.y
##            magnitudeMultiplication = self.magnitude * other.magnitude
##            magnitudeAddition = magSquaredAddition ** .5
##            unscaledMagnitude = magnitudeMultiplication * magnitudeAddition
##            magnitude = unscaledMagnitude / (self.magnitude)
